from aiogram.dispatcher import FSMContext
import aiofiles
import os
from aiogram.dispatcher.filters import Command
from states import UserRegister
from keyboards.default import kb_menu
from loader import dp, bot, types
from utils.misc import rate_limit
from utils.db_api.commands_all import UserCommand
from utils.db_api.data_base import get_async_session


@rate_limit(limit=10, key="/register")
@dp.message_handler(Command("register"))
async def register(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    try:
        async with get_async_session() as session:
            user_cmd = UserCommand(session)
            user = await user_cmd.get_user(message.from_user.id)
            if user is None:
                await bot.send_sticker(chat_id=message.from_user.id,
                                       sticker='CAACAgIAAxkBAAEJKhZkdyUeLsuissI6iQ9HOIZArcWOCgACHAADlp-MDpnUab5i8nnlLwQ')
                await bot.send_message(chat_id=message.from_user.id,
                                       text=F"–†–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—åüö¶ \n"
                                            F"–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è :")
                await UserRegister.name.set()
            elif user.status == 'register':
                await bot.send_message(chat_id=message.from_user.id,
                                       text=F'–ü—Ä–∏–≤–µ—Ç {message.from_user.full_name} –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!')
                await bot.send_sticker(chat_id=message.from_user.id,
                                       sticker='CAACAgIAAxkBAAEJKh1kdyV4xqZSG_MG8d1R_jSrrpTI-QACfgADlp-MDnGDEZ4sXLblLwQ')


    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        pass


@dp.message_handler(lambda message: not message.text.isalpha(),
                    state=UserRegister.name)
async def check_name(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
    await message.reply(text=F"–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤!")


@dp.message_handler(state=UserRegister.name)
async def load_name(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ –≤ –±–¥!"""
    async with state.proxy() as data:
        data['name'] = message.text
    await bot.send_message(chat_id=message.from_user.id,
                           text=F'–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç {data["name"]}??')

    await UserRegister.next()


@dp.message_handler(lambda message: not message.text.isdigit() or float(message.text) > 120 or float(message.text) < 5,
                    state=UserRegister.age)
async def check_age(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    await message.reply(text=F"–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü—ã—Ñ—Ä!–ò –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–º")


@dp.message_handler(state=UserRegister.age)
async def load_age(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞ –≤ –±–¥!"""
    async with state.proxy() as data:
        data["age"] = int(message.text)
    await bot.send_message(chat_id=message.from_user.id,
                           text=F'–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é -> üì∑')

    await UserRegister.next()


@dp.message_handler(lambda message: not message.photo, state=UserRegister.photo)
async def check_photo(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é"""
    await message.reply(text=F"–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ,–Ω–µ –æ–±–º–∞–Ω—ã–≤–∞–π!")


@dp.message_handler(content_types=types.ContentType.PHOTO, state=UserRegister.photo)
async def load_photo(message: types.Message, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        user_folder = os.path.join("photos", str(user_id))
        os.makedirs(user_folder, exist_ok=True)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞ –¥–∏—Å–∫
        photo_path = os.path.join(user_folder, "file.jpg")
        await message.photo[-1].download(destination=photo_path)
    except Exception:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        await message.reply("–û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return

    async with state.proxy() as data:
        data['status'] = 'register'
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    user_cmd = UserCommand(get_async_session())
    await user_cmd.create_user(
        user_id=message.from_user.id,
        name=data["name"],
        age=data["age"],
        photo=photo_path,
        status=data["status"],
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    async with aiofiles.open(photo_path, 'rb') as photo_file:
        await bot.send_photo(
            chat_id=message.from_user.id,
            photo=photo_file,
            caption=F"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! üéØ\n"
                    F"–ò–º—è: {data['name']}\n"
                    F"–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: {data['age']}\n"
                    F"–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!\n",
            reply_markup=kb_menu()
        )

    await bot.send_message(
        chat_id=message.from_user.id,
        text=F"–¢–µ–ø–µ—Ä—å –≤ –≤–∞—à–µ–º —Ä–∞–∑–¥–µ–ª–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ—à–µ–ª–µ–∫!\n"
             F"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –µ–≥–æ –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {0.0}",
    )

    await state.finish()
