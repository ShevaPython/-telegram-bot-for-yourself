from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from states import UserRegister
from keyboards.default import kb_menu
from loader import dp, bot, types
from utils.misc import rate_limit
from utils.db_api.commands_user import UserCommand
from utils.db_api.data_base import get_async_session


@rate_limit(limit=10, key="/register")
@dp.message_handler(Command("register"))
async def register(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    try:
        async with get_async_session() as session:
            user_cmd = UserCommand(session)
            user = await user_cmd.get_user(message.from_user.id)
            if user is None:
                await bot.send_message(chat_id=message.from_user.id,
                                       text=F"–†–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—åüö¶ \n"
                                            F"–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è :")
                await UserRegister.name.set()
            elif user.status == 'register':
                await bot.send_message(chat_id=message.from_user.id,
                                       text=F'–ü—Ä–∏–≤–µ—Ç {message.from_user.full_name} –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!')


    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        pass


@dp.message_handler(lambda message: not message.text.isalpha(),
                    state=UserRegister.name)
async def check_name(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
    await message.reply(text=F"–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤!")


@dp.message_handler(state=UserRegister.name)
async def load_name(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ –≤ –±–¥!"""
    async with state.proxy() as data:
        data['name'] = message.text
    await bot.send_message(chat_id=message.from_user.id,
                           text=F'–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç {data["name"]}??')

    await UserRegister.next()


@dp.message_handler(lambda message: not message.text.isdigit() or float(message.text) > 120 or float(message.text) < 5,
                    state=UserRegister.age)
async def check_age(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    await message.reply(text=F"–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü—ã—Ñ—Ä!–ò –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–º")


@dp.message_handler(state=UserRegister.age)
async def load_age(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞ –≤ –±–¥!"""
    async with state.proxy() as data:
        data["age"] = int(message.text)
    await bot.send_message(chat_id=message.from_user.id,
                           text=F'–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é -> üì∑')

    await UserRegister.next()


@dp.message_handler(lambda message: not message.photo, state=UserRegister.photo)
async def check_photo(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é"""
    await message.reply(text=F"–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ,–Ω–µ –æ–±–º–∞–Ω—ã–≤–∞–π!")


@dp.message_handler(content_types=['photo'], state=UserRegister.photo)
async def load_photo(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ –≤ –±–¥"""
    async with state.proxy() as data:
        data["photo"] = str(message.photo[0].file_id)
        data['status'] = 'register'
        await UserRegister.next()
    await bot.send_photo(chat_id=message.from_user.id,
                         photo=data['photo'],
                         caption=F"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.–°–ø–∞—Å–∏–±–æ,–∑–∞ —Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏—é!üéØ \n"
                                 F"–ò–º—è: {data['name']}\n"
                                 F"–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç :{data['age']}\n"
                                 F"–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!\n",
                         reply_markup=kb_menu())

    await  bot.send_message(chat_id=message.from_user.id,
                            text=F"–¢–µ–ø–µ—Ä—å –≤ –í–∞—à–µ–º —Ä–∞–∑–¥–µ–ª–µ –ø—Ä–∏—Å—É—Ü—Ç–≤—É–µ—Ç –∫–æ—à–µ–ª–µ–∫!"
                                 F"–ù–∞ –¥–∞–Ω—ã–π –º–æ–º–µ–Ω—Ç –µ–≥–æ –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 0.00")
    user_cmd = UserCommand(async_session)
    await user_cmd.create_user(user_id=message.from_user.id, state=state)
    await state.finish()
#
