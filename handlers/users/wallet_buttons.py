import logging
import re

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text

from loader import dp, bot, types
from states.register_state import UpdateUserWallet
from utils.db_api import get_async_session
from utils.db_api.commands_all import UserCommand, WalletCommands, TransactionCommands
from keyboards.default import kb_wallet, kb_menu, kb_stop_fsm_all

logger = logging.getLogger(__name__)


@dp.message_handler(Text(equals='–ö–æ—à–µ–ª–µ–∫üëõ'))
async def wallet_button(message: types.Message):
    """–ö–Ω–æ–ø–∫–∞ –∫–æ—à–µ–ª–µ–∫"""
    '''–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'''
    try:
        async with get_async_session() as session:
            user_command = UserCommand(session)
            user = await user_command.get_user(message.from_user.id)
            if user:
                await bot.send_photo(chat_id=message.from_user.id,
                                     photo='https://cdn.pixabay.com/photo/2017/06/29/20/04/wallet-2456004_640.jpg',
                                     caption=F"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å,—è —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ üôã‚Äç‚ôÇÔ∏è",
                                     reply_markup=kb_wallet()
                                     )
                await bot.delete_message(chat_id=message.from_user.id,
                                         message_id=message.message_id)
            else:
                await bot.send_message(chat_id=message.from_user.id, text="–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏—é")
    except Exception as e:
        print(F"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ :{e}")


@dp.message_handler(Text(equals='–ë–∞–ª–∞–Ω—Åüí∞'))
async def show_balance(message: types.Message):
    '''–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'''
    try:
        async with get_async_session() as session:
            user_command = UserCommand(session)
            user = await user_command.get_user(message.from_user.id)

            if user is None:
                await bot.send_message(chat_id=message.from_user.id,
                                       text="–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
            else:
                balance = await user_command.get_user_balance(message.from_user.id)

                await bot.send_photo(chat_id=message.from_user.id,
                                     photo='https://www.google.com/imgres?imgurl=http%3A%2F%2Fwebdiz.com.ua%2Fwp-content'
                                           '%2Fuploads%2F2021%2F04%2Fkak-zarabotat-mnogo-deneg.jpg&tbnid=UVXMbdrLkrHUQM&'
                                           'vet=12ahUKEwia-squuaT_AhURsioKHZugAJAQMyg9egQIARBa..i&imgrefurl=http%3A%2F%2'
                                           'Fwebdiz.com.ua%2Fkak-zarabotat-mnogo-deneg-bez-vlozhenii-po-kiosaki%2F&docid='
                                           'nQKLwc0v12wNgM&w=1200&h=908&q=%D0%B1%D0%B5%D1%81%D0%BF%D0%BB%D0%B0%D1%82%D0%B'
                                           'D%D0%BE%D0%B5%20%D1%84%D0%BE%D1%82%D0%BE%20%D0%B4%D0%B5%D0%BD%D0%B5%D0%B3&ved'
                                           '=2ahUKEwia-squuaT_AhURsioKHZugAJAQMyg9egQIARBa',
                                     caption=f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {balance} –≥—Ä–Ω üíµ.",
                                     reply_markup=kb_wallet())

                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ë–∞–ª–∞–Ω—Åüí∞"
                await bot.delete_message(chat_id=message.from_user.id,
                                         message_id=message.message_id)
            await session.commit()

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        await bot.send_message(chat_id=message.from_user.id,
                               text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message_handler(Text(equals='–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Åüíµ'), state=None)
async def update_balance_state(message: types.Message):
    '''–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'''
    try:
        async with get_async_session() as session:
            user_command = UserCommand(session)
            user = await user_command.get_user(message.from_user.id)

            if user is None:
                await bot.send_message(chat_id=message.from_user.id,
                                       text="–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
            else:
                await UpdateUserWallet.money.set()
                await bot.send_message(chat_id=message.from_user.id,
                                       text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:",
                                       reply_markup=kb_stop_fsm_all())
            await bot.delete_message(chat_id=message.from_user.id,
                                     message_id=message.message_id)

            await session.commit()

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        await bot.send_message(chat_id=message.from_user.id,
                               text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message_handler(lambda message: not message.text.isdigit() or int(message.text) <= 0,
                    state=UpdateUserWallet.money)
async def check_update_money(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞"""
    return await message.reply(text=F"–°—É–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º \n"
                                    F"–ò –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ 0",
                               reply_markup=kb_stop_fsm_all())


@dp.message_handler(state=UpdateUserWallet.money)
async def load_chain_money(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        async with state.proxy() as data:
            data['money'] = float(message.text)
            change_balance = data['money']

        async with get_async_session() as session:
            wallet = WalletCommands(session)
            user_change_balance = await wallet.add_money_balance(owner_id=message.from_user.id,
                                                                 amount=change_balance)
            wallet_id = await wallet.get_wallet_from_user(owner_id=message.from_user.id)
            # Create a transaction
            transaction = await wallet.create_transaction(wallet_id=wallet_id.id, amount=change_balance)

            await bot.send_message(chat_id=message.from_user.id,
                                   text=F"–í–∞—à—å –±–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {change_balance} –≥—Ä–Ω.‚úÖ\n"
                                        F"C–æ—Å—Ç–æ–≤–ª—è–µ—Ç  –≥—Ä–Ω {user_change_balance} üíµ",
                                   reply_markup=kb_wallet())
            await session.commit()
            await state.finish()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞")
        await bot.send_message(chat_id=message.from_user.id,
                               text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message_handler(Text(equals='–ë–∞–ª–∞–Ω—Å –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã–π –º–µ—Å—è—Ü üåô'))
async def month_balance(message: types.Message):
    try:
        async with get_async_session() as session:
            wallet_commands = WalletCommands(session)

            wallet = await wallet_commands.get_wallet_from_user(owner_id=message.from_user.id)
            if wallet is None:
                await bot.send_message(chat_id=message.from_user.id,
                                       text="–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ—à–µ–ª–µ–∫.")
                return

            await bot.send_message(chat_id=message.from_user.id,
                                   text="–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ú–ú.–ì–ì–ì–ì' (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.2023):",
                                   reply_markup=kb_stop_fsm_all())
            await UpdateUserWallet.month.set()

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –∑–∞ –º–µ—Å—è—Ü")
        await bot.send_message(chat_id=message.from_user.id,
                               text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –∑–∞ –º–µ—Å—è—Ü. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message_handler(lambda message: not re.match(r"\d{2}.\d{4}", message.text), state=UpdateUserWallet.month)
async def check_month_format(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–≤–æ–¥–∞ –º–µ—Å—è—Ü–∞"""
    return await message.reply(text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–µ—Å—è—Ü–∞. –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ú–ú.–ì–ì–ì–ì' (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.2023):",
                               reply_markup=kb_stop_fsm_all())


@dp.message_handler(state=UpdateUserWallet.month)
async def show_month_balance(message: types.Message, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü"""
    try:
        async with state.proxy() as data:
            month = message.text

        async with get_async_session() as session:
            wallet_commands = WalletCommands(session)
            transaction_commands = TransactionCommands(session)

            wallet = await wallet_commands.get_wallet_from_user(owner_id=message.from_user.id)
            if wallet is None:
                await bot.send_message(chat_id=message.from_user.id,
                                       text="–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ—à–µ–ª–µ–∫.",
                                       reply_markup=kb_wallet())
                return

            transactions = await transaction_commands.get_transactions_by_month(wallet.id, month)
            total_balance = sum(transaction.amount for transaction in transactions)

            await bot.send_photo(chat_id=message.from_user.id,
                                 photo='https://www.google.com/imgres?imgurl=https%3A%2F%2Fimg2.freepng.ru%2F20180407%2'
                                       'Fdze%2Fkisspng-money-bag-clip-art-mony-5ac87e8be1bd13.1533603415230890359246.jpg'
                                       '&tbnid=MA2UCcT0Xi4_3M&vet=12ahUKEwia-squuaT_AhURsioKHZugAJAQMyhMegQIARB-..i&imgr'
                                       'efurl=https%3A%2F%2Fwww.freepng.ru%2Fpng-uo1dqr%2F&docid=xOzWg6rxCguzlM&w=900&h='
                                       '1040&q=%D0%B1%D0%B5%D1%81%D0%BF%D0%BB%D0%B0%D1%82%D0%BD%D0%BE%D0%B5%20%D1%84%D0%'
                                       'BE%D1%82%D0%BE%20%D0%B4%D0%B5%D0%BD%D0%B5%D0%B3&ved=2ahUKEwia-squuaT_AhURsioKHZu'
                                       'gAJAQMyhMegQIARB-',
                                 caption=f"–ë–∞–ª–∞–Ω—Å –∑–∞ –º–µ—Å—è—Ü {month} —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {total_balance} –≥—Ä–Ω üíµ",
                                 reply_markup=kb_wallet())

            await state.finish()

    except Exception as e:
        logger.exception(F"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –∑–∞ –º–µ—Å—è—Ü :{e}")
        await bot.send_message(chat_id=message.from_user.id,
                               text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –∑–∞ –º–µ—Å—è—Ü. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# # _____________________________________________________________________

@dp.message_handler(Text(equals='–í–∑—è—Ç—å —Å –∫–æ–ª—à–µ–ª—å–∫–∞üíµ'))
async def take_of_balance_state(message: types.Message):
    '''–û—Ç–Ω—è—Ç—å –±–∞–ª–∞–Ω—Å'''
    try:
        async with get_async_session() as session:
            user_command = UserCommand(session)
            user = await user_command.get_user(message.from_user.id)

            if user is None:
                await bot.send_message(chat_id=message.from_user.id,
                                       text="–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
            else:
                await UpdateUserWallet.take_money.set()
                await bot.send_message(chat_id=message.from_user.id,
                                       text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤–∑—è—Ç–∏—è —Å –±–∞–ª–∞–Ω—Å–∞:",
                                       reply_markup=kb_stop_fsm_all())
            await bot.delete_message(chat_id=message.from_user.id,
                                     message_id=message.message_id)

            await session.commit()

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        await bot.send_message(chat_id=message.from_user.id,
                               text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message_handler(lambda message: not message.text.isdigit() or int(message.text) <= 0,
                    state=UpdateUserWallet.take_money)
async def check_take_of_update_money(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞"""
    return await message.reply(text=F"–°—É–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º \n"
                                    F"–ò –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ 0",
                               reply_markup=kb_stop_fsm_all())


@dp.message_handler(state=UpdateUserWallet.take_money)
async def load_take_off_money(message: types.Message, state: FSMContext):
    """–°–Ω—è—Ç–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ —Å –±–∞–ª–∞–Ω—Å–∞"""
    try:
        change_balance = float(message.text)  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è —Å–Ω—è—Ç–∏—è —Å –±–∞–ª–∞–Ω—Å–∞

        async with get_async_session() as session:
            wallet = WalletCommands(session)
            wallet_owner = await wallet.get_wallet_from_user(owner_id=message.from_user.id)
            current_balance_owner = wallet_owner.balance

            if change_balance > current_balance_owner:
                await bot.send_message(chat_id=message.from_user.id,
                                       text="–í–∞—à—å –±–∞–ª–∞–Ω—Å –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ –Ω–µ –º–æ–∂–µ—Ç—å –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º ü§¨",
                                       reply_markup=kb_wallet())
                return

            user_change_balance = await wallet.take_off_balance(owner_id=message.from_user.id, amount=change_balance)
            # Create a transaction
            transaction = await wallet.create_transaction(wallet_id=wallet_owner.id, amount=-change_balance)

            await session.commit()

        await bot.send_message(chat_id=message.from_user.id,
                               text=f"–°—É–º–º–∞ {abs(change_balance)}üíµ –≥—Ä–Ω —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç–∞ —Å –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞. \n"
                                    f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {user_change_balance}üíµ –≥—Ä–Ω.",
                               reply_markup=kb_wallet())
        await state.finish()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤ —Å –±–∞–ª–∞–Ω—Å–∞")
        await bot.send_message(chat_id=message.from_user.id,
                               text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤ —Å –±–∞–ª–∞–Ω—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
